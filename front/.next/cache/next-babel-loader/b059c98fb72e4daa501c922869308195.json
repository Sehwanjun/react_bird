{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\arthu\\\\Documents\\\\react-nodebird\\\\front\\\\pages\\\\_app.js\";\n\nvar __jsx = React.createElement;\n//next에서 제공하는 기능으로 해당 _app.js로 파일명을 가져가면\n//폴더 내 모든파일이(index, profile 등) _app.js를 부모 컴포넌트로 사용함\nimport React from \"react\";\nimport AppLayout from \"../components/AppLayout\";\nimport PropTypes from \"prop-types\";\nimport Head from \"next/head\";\nimport reducer from \"../reducers\";\nimport { Provider } from \"react-redux\";\nimport { createStore, compose, applyMiddleware } from \"redux\";\nimport withRedux from \"next-redux-wrapper\"; // const store = createStore(reducer); 빼고 {component, store } 이렇게 해야하나?\n\nvar NodeBird = function NodeBird(_ref) {\n  var Component = _ref.Component;\n  var store = createStore(reducer);\n  return __jsx(Provider, {\n    store: store,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }, \"NodeBird\"), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.18.1/antd.css\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  }), __jsx(\"script\", {\n    src: \"http://cdnjs.cloutflare.com/ajax/libs/antd/3.18.1/antd.js\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  })), __jsx(AppLayout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, __jsx(Component, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  })));\n  NodeBird.propTypes = {\n    // node: JSX에 들어갈 수 있는 모든 것들(문자열, 컴포넌트 등)\n    // elementType: 컴포넌트 자체\n    Component: PropTypes.elementType,\n    store: PropTypes.object\n  };\n}; // nodeBird에 스토어 삽입\n\n\n_c = NodeBird;\nexport default withRedux(function (initialState, options) {\n  var middlewares = [];\n  var enhancer = compose(applyMiddleware.apply(void 0, middlewares), window.__REDUX_DEVTOOLS_EXTENSION__ !== \"undefined\" ? window.__REDUX_DEVTOOLS_EXTENSION__() : function (f) {\n    return f;\n  });\n  var store = createStore(reducer, initialState);\n  return store;\n})(NodeBird); //페이지들의 공통적인 부분을 모아놓음\n//<Component/>는 자식컴포넌트에서 가져오는 것임(next기능)\n\nvar _c;\n\n$RefreshReg$(_c, \"NodeBird\");","map":{"version":3,"sources":["C:/Users/arthu/Documents/react-nodebird/front/pages/_app.js"],"names":["React","AppLayout","PropTypes","Head","reducer","Provider","createStore","compose","applyMiddleware","withRedux","NodeBird","Component","store","propTypes","elementType","object","initialState","options","middlewares","enhancer","window","__REDUX_DEVTOOLS_EXTENSION__","f"],"mappings":";;;;AAAA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,WAAT,EAAsBC,OAAtB,EAA+BC,eAA/B,QAAsD,OAAtD;AACA,OAAOC,SAAP,MAAsB,oBAAtB,C,CAEA;;AACA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAAmB;AAAA,MAAhBC,SAAgB,QAAhBA,SAAgB;AAClC,MAAMC,KAAK,GAAGN,WAAW,CAACF,OAAD,CAAzB;AACA,SACE,MAAC,QAAD;AAAU,IAAA,KAAK,EAAEQ,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE;AACE,IAAA,GAAG,EAAC,YADN;AAEE,IAAA,IAAI,EAAC,6DAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAME;AAAQ,IAAA,GAAG,EAAC,2DAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF,EASE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CATF,CADF;AAgBAF,EAAAA,QAAQ,CAACG,SAAT,GAAqB;AACnB;AACA;AACAF,IAAAA,SAAS,EAAET,SAAS,CAACY,WAHF;AAInBF,IAAAA,KAAK,EAAEV,SAAS,CAACa;AAJE,GAArB;AAMD,CAxBD,C,CAyBA;;;KAzBML,Q;AA0BN,eAAeD,SAAS,CAAC,UAACO,YAAD,EAAeC,OAAf,EAA2B;AAClD,MAAMC,WAAW,GAAG,EAApB;AACA,MAAMC,QAAQ,GAAGZ,OAAO,CACtBC,eAAe,MAAf,SAAmBU,WAAnB,CADsB,EAEtBE,MAAM,CAACC,4BAAP,KAAwC,WAAxC,GACID,MAAM,CAACC,4BAAP,EADJ,GAEI,UAAAC,CAAC;AAAA,WAAIA,CAAJ;AAAA,GAJiB,CAAxB;AAMA,MAAMV,KAAK,GAAGN,WAAW,CAACF,OAAD,EAAUY,YAAV,CAAzB;AACA,SAAOJ,KAAP;AACD,CAVuB,CAAT,CAUZF,QAVY,CAAf,C,CAYA;AACA","sourcesContent":["//next에서 제공하는 기능으로 해당 _app.js로 파일명을 가져가면\r\n//폴더 내 모든파일이(index, profile 등) _app.js를 부모 컴포넌트로 사용함\r\nimport React from \"react\";\r\nimport AppLayout from \"../components/AppLayout\";\r\nimport PropTypes from \"prop-types\";\r\nimport Head from \"next/head\";\r\nimport reducer from \"../reducers\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, compose, applyMiddleware } from \"redux\";\r\nimport withRedux from \"next-redux-wrapper\";\r\n\r\n// const store = createStore(reducer); 빼고 {component, store } 이렇게 해야하나?\r\nconst NodeBird = ({ Component }) => {\r\n  const store = createStore(reducer);\r\n  return (\r\n    <Provider store={store}>\r\n      <Head>\r\n        <title>NodeBird</title>\r\n        <link\r\n          rel=\"stylesheet\"\r\n          href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.18.1/antd.css\"\r\n        />\r\n        <script src=\"http://cdnjs.cloutflare.com/ajax/libs/antd/3.18.1/antd.js\" />\r\n      </Head>\r\n      <AppLayout>\r\n        {/* 다른 컴포넌트들을 의미 */}\r\n        <Component></Component>\r\n      </AppLayout>\r\n    </Provider>\r\n  );\r\n  NodeBird.propTypes = {\r\n    // node: JSX에 들어갈 수 있는 모든 것들(문자열, 컴포넌트 등)\r\n    // elementType: 컴포넌트 자체\r\n    Component: PropTypes.elementType,\r\n    store: PropTypes.object,\r\n  };\r\n};\r\n// nodeBird에 스토어 삽입\r\nexport default withRedux((initialState, options) => {\r\n  const middlewares = [];\r\n  const enhancer = compose(\r\n    applyMiddleware(...middlewares),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ !== \"undefined\"\r\n      ? window.__REDUX_DEVTOOLS_EXTENSION__()\r\n      : f => f\r\n  );\r\n  const store = createStore(reducer, initialState);\r\n  return store;\r\n})(NodeBird);\r\n\r\n//페이지들의 공통적인 부분을 모아놓음\r\n//<Component/>는 자식컴포넌트에서 가져오는 것임(next기능)\r\n"]},"metadata":{},"sourceType":"module"}