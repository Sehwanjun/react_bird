{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arthu\\\\Documents\\\\react-nodebird\\\\front\\\\pages\\\\_app.js\";\nvar __jsx = React.createElement;\n//next에서 제공하는 기능으로 해당 _app.js로 파일명을 가져가면\n//폴더 내 모든파일이(index, profile 등) _app.js를 부모 컴포넌트로 사용함\nimport React from \"react\";\nimport AppLayout from \"../components/AppLayout\";\nimport PropTypes from \"prop-types\";\nimport Head from \"next/head\";\nimport reducer from \"../reducers\";\nimport { createWrapper } from \"next-redux-wrapper\";\nimport { createStore, compose, applyMiddleware } from \"redux\";\nimport withRedux from \"next-redux-wrapper\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootSaga from \"../sagas\"; // const store = createStore(reducer); 빼고 {component, store } 이렇게 해야하나?\n\nconst NodeBird = ({\n  Component\n}) => {\n  const store = createStore(reducer);\n  return (// <provider>태그로 감싸면 라우터 작동안됨\n    __jsx(React.Fragment, null, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 7\n      }\n    }, __jsx(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }\n    }, \"NodeBird\"), __jsx(\"link\", {\n      rel: \"stylesheet\",\n      href: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.18.1/antd.css\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }\n    }), __jsx(\"script\", {\n      src: \"http://cdnjs.cloutflare.com/ajax/libs/antd/3.18.1/antd.js\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }\n    })), __jsx(AppLayout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 7\n      }\n    }, __jsx(Component, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }\n    })))\n  );\n  NodeBird.propTypes = {\n    // node: JSX에 들어갈 수 있는 모든 것들(문자열, 컴포넌트 등)\n    // elementType: 컴포넌트 자체\n    Component: PropTypes.elementType.isRequired,\n    store: PropTypes.object.isRequired\n  };\n};\n\nconst configureStore = (initialState, options) => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares)); // const enhancer = compose(\n  //   applyMiddleware(...middlewares),\n  //   !options.isServer &&\n  //     typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== \"undefined\"\n  //     ? window.__REDUX_DEVTOOLS_EXTENSION__()\n  //     : f => f\n  // );\n\n  const store = createStore(reducer, initialState, enhancer);\n  sagaMiddleware.run(rootSaga); // store.sagaTask = sagaMiddleware.run(rootSaga);\n\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: true\n}); // nodeBird에 스토어 삽입, 미들웨어 삽입(하단코드 고정)\n\nexport default withRedux(configureStore)(NodeBird); //페이지들의 공통적인 부분을 모아놓음\n//<Component/>는 자식컴포넌트에서 가져오는 것임(next기능)\n// import { applyMiddleware, createStore, compose } from \"redux\";\n// import createSagaMiddleware from \"redux-saga\";\n// import { createWrapper } from \"next-redux-wrapper\";\n// import { composeWithDevTools } from \"redux-devtools-extension\";\n// import reducer from \"../reducers\";\n// import rootSaga from \"../sagas\";\n// const configureStore = context => {\n//   console.log(context);\n//   const sagaMiddleware = createSagaMiddleware();\n//   const middlewares = [sagaMiddleware];\n//   const enhancer =\n//     process.env.NODE_ENV === \"production\"\n//       ? compose(applyMiddleware(...middlewares))\n//       : composeWithDevTools(applyMiddleware(...middlewares));\n//   const store = createStore(reducer, enhancer);\n//   store.sagaTask = sagaMiddleware.run(rootSaga);\n//   return store;\n// };\n// export default wrapper;","map":{"version":3,"sources":["C:/Users/arthu/Documents/react-nodebird/front/pages/_app.js"],"names":["React","AppLayout","PropTypes","Head","reducer","createWrapper","createStore","compose","applyMiddleware","withRedux","composeWithDevTools","createSagaMiddleware","rootSaga","NodeBird","Component","store","propTypes","elementType","isRequired","object","configureStore","initialState","options","sagaMiddleware","middlewares","enhancer","run","wrapper","debug"],"mappings":";;AAAA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,WAAT,EAAsBC,OAAtB,EAA+BC,eAA/B,QAAsD,OAAtD;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,QAAP,MAAqB,UAArB,C,CAEA;;AACA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmB;AAClC,QAAMC,KAAK,GAAGT,WAAW,CAACF,OAAD,CAAzB;AACA,SACE;AACA,gCACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE;AACE,MAAA,GAAG,EAAC,YADN;AAEE,MAAA,IAAI,EAAC,6DAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAME;AAAQ,MAAA,GAAG,EAAC,2DAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,CADF,EASE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CATF;AAFF;AAiBAS,EAAAA,QAAQ,CAACG,SAAT,GAAqB;AACnB;AACA;AACAF,IAAAA,SAAS,EAAEZ,SAAS,CAACe,WAAV,CAAsBC,UAHd;AAInBH,IAAAA,KAAK,EAAEb,SAAS,CAACiB,MAAV,CAAiBD;AAJL,GAArB;AAMD,CAzBD;;AA2BA,MAAME,cAAc,GAAG,CAACC,YAAD,EAAeC,OAAf,KAA2B;AAChD,QAAMC,cAAc,GAAGZ,oBAAoB,EAA3C;AACA,QAAMa,WAAW,GAAG,CAACD,cAAD,CAApB;AACA,QAAME,QAAQ,GACZ,QACIlB,OAAO,CAACC,eAAe,CAAC,GAAGgB,WAAJ,CAAhB,CADX,GAEId,mBAAmB,CAACF,eAAe,CAAC,GAAGgB,WAAJ,CAAhB,CAHzB,CAHgD,CAOhD;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAMT,KAAK,GAAGT,WAAW,CAACF,OAAD,EAAUiB,YAAV,EAAwBI,QAAxB,CAAzB;AACAF,EAAAA,cAAc,CAACG,GAAf,CAAmBd,QAAnB,EAfgD,CAgBhD;;AACA,SAAOG,KAAP;AACD,CAlBD;;AAoBA,MAAMY,OAAO,GAAGtB,aAAa,CAACe,cAAD,EAAiB;AAC5CQ,EAAAA,KAAK;AADuC,CAAjB,CAA7B,C,CAIA;;AACA,eAAenB,SAAS,CAACW,cAAD,CAAT,CAA0BP,QAA1B,CAAf,C,CAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["//next에서 제공하는 기능으로 해당 _app.js로 파일명을 가져가면\r\n//폴더 내 모든파일이(index, profile 등) _app.js를 부모 컴포넌트로 사용함\r\nimport React from \"react\";\r\nimport AppLayout from \"../components/AppLayout\";\r\nimport PropTypes from \"prop-types\";\r\nimport Head from \"next/head\";\r\nimport reducer from \"../reducers\";\r\nimport { createWrapper } from \"next-redux-wrapper\";\r\nimport { createStore, compose, applyMiddleware } from \"redux\";\r\nimport withRedux from \"next-redux-wrapper\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport rootSaga from \"../sagas\";\r\n\r\n// const store = createStore(reducer); 빼고 {component, store } 이렇게 해야하나?\r\nconst NodeBird = ({ Component }) => {\r\n  const store = createStore(reducer);\r\n  return (\r\n    // <provider>태그로 감싸면 라우터 작동안됨\r\n    <>\r\n      <Head>\r\n        <title>NodeBird</title>\r\n        <link\r\n          rel=\"stylesheet\"\r\n          href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.18.1/antd.css\"\r\n        />\r\n        <script src=\"http://cdnjs.cloutflare.com/ajax/libs/antd/3.18.1/antd.js\" />\r\n      </Head>\r\n      <AppLayout>\r\n        {/* 다른 컴포넌트들을 의미 */}\r\n        <Component></Component>\r\n      </AppLayout>\r\n    </>\r\n  );\r\n  NodeBird.propTypes = {\r\n    // node: JSX에 들어갈 수 있는 모든 것들(문자열, 컴포넌트 등)\r\n    // elementType: 컴포넌트 자체\r\n    Component: PropTypes.elementType.isRequired,\r\n    store: PropTypes.object.isRequired,\r\n  };\r\n};\r\n\r\nconst configureStore = (initialState, options) => {\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  const middlewares = [sagaMiddleware];\r\n  const enhancer =\r\n    process.env.NODE_ENV === \"production\"\r\n      ? compose(applyMiddleware(...middlewares))\r\n      : composeWithDevTools(applyMiddleware(...middlewares));\r\n  // const enhancer = compose(\r\n  //   applyMiddleware(...middlewares),\r\n  //   !options.isServer &&\r\n  //     typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== \"undefined\"\r\n  //     ? window.__REDUX_DEVTOOLS_EXTENSION__()\r\n  //     : f => f\r\n  // );\r\n  const store = createStore(reducer, initialState, enhancer);\r\n  sagaMiddleware.run(rootSaga);\r\n  // store.sagaTask = sagaMiddleware.run(rootSaga);\r\n  return store;\r\n};\r\n\r\nconst wrapper = createWrapper(configureStore, {\r\n  debug: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\n// nodeBird에 스토어 삽입, 미들웨어 삽입(하단코드 고정)\r\nexport default withRedux(configureStore)(NodeBird);\r\n\r\n//페이지들의 공통적인 부분을 모아놓음\r\n//<Component/>는 자식컴포넌트에서 가져오는 것임(next기능)\r\n\r\n// import { applyMiddleware, createStore, compose } from \"redux\";\r\n// import createSagaMiddleware from \"redux-saga\";\r\n// import { createWrapper } from \"next-redux-wrapper\";\r\n// import { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\n// import reducer from \"../reducers\";\r\n// import rootSaga from \"../sagas\";\r\n\r\n// const configureStore = context => {\r\n//   console.log(context);\r\n//   const sagaMiddleware = createSagaMiddleware();\r\n//   const middlewares = [sagaMiddleware];\r\n//   const enhancer =\r\n//     process.env.NODE_ENV === \"production\"\r\n//       ? compose(applyMiddleware(...middlewares))\r\n//       : composeWithDevTools(applyMiddleware(...middlewares));\r\n//   const store = createStore(reducer, enhancer);\r\n//   store.sagaTask = sagaMiddleware.run(rootSaga);\r\n//   return store;\r\n// };\r\n\r\n// export default wrapper;\r\n"]},"metadata":{},"sourceType":"module"}