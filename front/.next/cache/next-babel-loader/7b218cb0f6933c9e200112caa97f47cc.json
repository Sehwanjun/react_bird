{"ast":null,"code":"import { all, takeLatest, call, put } from \"redux-saga/effects\";\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from \"../reducers/user\";\n\nfunction loginAPI() {// 서버에 요청을 보내는 부분\n}\n\nfunction* login() {\n  try {\n    yield call(loginAPI); // put은 dispatch와 동일\n\n    yield put({\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패시\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n} // 1. login 요청을 해서 상단의 login함수 실행되게 함(비동기동작 위한 대기)\n\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN, login);\n}\n\nfunction* helloSaga() {\n  console.log('hello saga');\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin)]);\n}","map":{"version":3,"sources":["C:/Users/arthu/Documents/react-nodebird/front/sagas/user.js"],"names":["all","takeLatest","call","put","LOG_IN","LOG_IN_SUCCESS","LOG_IN_FAILURE","loginAPI","login","type","e","console","error","watchLogin","helloSaga","log","userSaga","fork"],"mappings":"AAAA,SAASA,GAAT,EAAcC,UAAd,EAA0BC,IAA1B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,cAAjC,QAAuD,kBAAvD;;AAEA,SAASC,QAAT,GAAoB,CAClB;AACD;;AAED,UAAUC,KAAV,GAAkB;AAChB,MAAI;AACF,UAAMN,IAAI,CAACK,QAAD,CAAV,CADE,CAEF;;AACA,UAAMJ,GAAG,CAAC;AACRM,MAAAA,IAAI,EAAEJ;AADE,KAAD,CAAT;AAGD,GAND,CAME,OAAOK,CAAP,EAAU;AACV;AACAC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMP,GAAG,CAAC;AACRM,MAAAA,IAAI,EAAEH;AADE,KAAD,CAAT;AAGD;AACF,C,CAED;;;AACA,UAAUO,UAAV,GAAuB;AACrB,QAAMZ,UAAU,CAACG,MAAD,EAASI,KAAT,CAAhB;AACD;;AAED,UAAUM,SAAV,GAAqB;AACnBH,EAAAA,OAAO,CAACI,GAAR,CAAY,YAAZ;AACD;;AAED,eAAe,UAAUC,QAAV,GAAqB;AAClC,QAAMhB,GAAG,CAAC,CAACiB,IAAI,CAACJ,UAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["import { all, takeLatest, call, put } from \"redux-saga/effects\";\r\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from \"../reducers/user\";\r\n\r\nfunction loginAPI() {\r\n  // 서버에 요청을 보내는 부분\r\n}\r\n\r\nfunction* login() {\r\n  try {\r\n    yield call(loginAPI);\r\n    // put은 dispatch와 동일\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n    });\r\n  } catch (e) {\r\n    // loginAPI 실패시\r\n    console.error(e);\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n    });\r\n  }\r\n}\r\n\r\n// 1. login 요청을 해서 상단의 login함수 실행되게 함(비동기동작 위한 대기)\r\nfunction* watchLogin() {\r\n  yield takeLatest(LOG_IN, login);\r\n}\r\n\r\nfunction* helloSaga(){\r\n  console.log('hello saga')\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLogin)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}