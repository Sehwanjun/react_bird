{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(login),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchHello),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, takeLatest, takeEvery, call, put, take } from \"redux-saga/effects\";\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from \"../reducers/user\";\nvar HELLO_SAGA = \"HELLO_SAGA\";\n\nfunction loginAPI() {// 서버에 요청을 보내는 부분\n}\n\nfunction login() {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loginAPI);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          _context.next = 12;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          // loginAPI 실패시\n          console.error(_context.t0);\n          _context.next = 12;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n} // 1. login 요청을 해서 상단의 login함수(LOG_IN액션 실행)\n// 실행되게 함(비동기동작 위한 대기) 만약 그러면 LOG_IN_SUCCESS 실행\n// 반복문 넣는 이유: 예를들어 빼면 로그아웃후 다시 로그인시 작동불가 방지\n\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!true) {\n            _context2.next = 8;\n            break;\n          }\n\n          _context2.next = 3;\n          return take(LOG_IN);\n\n        case 3:\n          _context2.next = 5;\n          return delay(2000);\n\n        case 5:\n          // put: saga의 dispatch\n          put({\n            type: LOG_IN_SUCCESS\n          });\n          _context2.next = 0;\n          break;\n\n        case 8:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction watchHello() {\n  return _regeneratorRuntime.wrap(function watchHello$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(HELLO_SAGA, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n            return _regeneratorRuntime.wrap(function _callee$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    console.log(1);\n                    console.log(2);\n                    console.log(3);\n                    console.log(4);\n\n                  case 4:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _callee);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked3);\n} // function* watchHello() {\n//   while (true) {\n//     yield take(HELLO_SAGA);\n//     console.log(1);\n//     console.log(2);\n//     console.log(3);\n//     console.log(4);\n//   }\n// }\n// take: 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트\n// HELLO_SAGA가 불려오면 next를 해준다.(hello saga까지)\n// 하지만 while 하면 무제한 반복(pages/index.js)에 dispatch 많이 복사하면 그 여러개 실행\n// 그리고 for을 통해 횟수를 조절할 수도 있음\n// function* helloSaga() {\n//   console.log(\"before saga\");\n//   // for (let i = 0; i < 5; i++) {\n//   yield take(HELLO_SAGA);\n//   console.log(\"hello saga\");\n//   // }\n// }\n\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all[(watchLogin(), watchHello())];\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["C:/Users/arthu/Documents/react-nodebird/front/sagas/user.js"],"names":["login","watchLogin","watchHello","userSaga","all","takeLatest","takeEvery","call","put","take","LOG_IN","LOG_IN_SUCCESS","LOG_IN_FAILURE","HELLO_SAGA","loginAPI","type","console","error","delay","log"],"mappings":";;oDAgBUA,K;qDAoBAC,U;qDAWAC,U;qDA+BeC,Q;;AA9EzB,SACEC,GADF,EAEEC,UAFF,EAGEC,SAHF,EAIEC,IAJF,EAKEC,GALF,EAMEC,IANF,QAOO,oBAPP;AAQA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,cAAjC,QAAuD,kBAAvD;AAEA,IAAMC,UAAU,GAAG,YAAnB;;AAEA,SAASC,QAAT,GAAoB,CAClB;AACD;;AAED,SAAUd,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI,iBAAMO,IAAI,CAACO,QAAD,CAAV;;AAFJ;AAAA;AAII,iBAAMN,GAAG,CAAC;AACRO,YAAAA,IAAI,EAAEJ;AADE,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQI;AACAK,UAAAA,OAAO,CAACC,KAAR;AATJ;AAUI,iBAAMT,GAAG,CAAC;AACRO,YAAAA,IAAI,EAAEH;AADE,WAAD,CAAT;;AAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAgBA;AACA;AACA;;;AAEA,SAAUX,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA,eACS,IADT;AAAA;AAAA;AAAA;;AAAA;AAEI,iBAAMQ,IAAI,CAACC,MAAD,CAAV;;AAFJ;AAAA;AAGI,iBAAMQ,KAAK,CAAC,IAAD,CAAX;;AAHJ;AAII;AACAV,UAAAA,GAAG,CAAC;AACFO,YAAAA,IAAI,EAAEJ;AADJ,WAAD,CAAH;AALJ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWA,SAAUT,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMI,SAAS,CAACO,UAAD,wCAAa;AAAA;AAAA;AAAA;AAAA;AAC1BG,oBAAAA,OAAO,CAACG,GAAR,CAAY,CAAZ;AACAH,oBAAAA,OAAO,CAACG,GAAR,CAAY,CAAZ;AACAH,oBAAAA,OAAO,CAACG,GAAR,CAAY,CAAZ;AACAH,oBAAAA,OAAO,CAACG,GAAR,CAAY,CAAZ;;AAJ0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAb,EAAf;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAe,SAAUhB,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,EAAEH,UAAU,IAAIC,UAAU,EAA1B,EAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {\r\n  all,\r\n  takeLatest,\r\n  takeEvery,\r\n  call,\r\n  put,\r\n  take,\r\n} from \"redux-saga/effects\";\r\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from \"../reducers/user\";\r\n\r\nconst HELLO_SAGA = \"HELLO_SAGA\";\r\n\r\nfunction loginAPI() {\r\n  // 서버에 요청을 보내는 부분\r\n}\r\n\r\nfunction* login() {\r\n  try {\r\n    yield call(loginAPI);\r\n    // put은 dispatch와 동일\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n    });\r\n  } catch (e) {\r\n    // loginAPI 실패시\r\n    console.error(e);\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n    });\r\n  }\r\n}\r\n\r\n// 1. login 요청을 해서 상단의 login함수(LOG_IN액션 실행)\r\n// 실행되게 함(비동기동작 위한 대기) 만약 그러면 LOG_IN_SUCCESS 실행\r\n// 반복문 넣는 이유: 예를들어 빼면 로그아웃후 다시 로그인시 작동불가 방지\r\n\r\nfunction* watchLogin() {\r\n  while (true) {\r\n    yield take(LOG_IN);\r\n    yield delay(2000);\r\n    // put: saga의 dispatch\r\n    put({\r\n      type: LOG_IN_SUCCESS,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchHello(){\r\n  yield takeEvery(HELLO_SAGA, function*(){\r\n    console.log(1)\r\n    console.log(2)\r\n    console.log(3)\r\n    console.log(4)\r\n  })\r\n}\r\n\r\n// function* watchHello() {\r\n//   while (true) {\r\n//     yield take(HELLO_SAGA);\r\n//     console.log(1);\r\n//     console.log(2);\r\n//     console.log(3);\r\n//     console.log(4);\r\n//   }\r\n// }\r\n\r\n// take: 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트\r\n// HELLO_SAGA가 불려오면 next를 해준다.(hello saga까지)\r\n// 하지만 while 하면 무제한 반복(pages/index.js)에 dispatch 많이 복사하면 그 여러개 실행\r\n// 그리고 for을 통해 횟수를 조절할 수도 있음\r\n// function* helloSaga() {\r\n//   console.log(\"before saga\");\r\n//   // for (let i = 0; i < 5; i++) {\r\n//   yield take(HELLO_SAGA);\r\n//   console.log(\"hello saga\");\r\n//   // }\r\n// }\r\n\r\nexport default function* userSaga() {\r\n  yield all[(watchLogin(), watchHello())];\r\n}\r\n"]},"metadata":{},"sourceType":"module"}