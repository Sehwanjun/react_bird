{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\arthu\\\\Documents\\\\react-nodebird\\\\front\\\\pages\\\\_app.js\";\n\nvar __jsx = React.createElement;\n//next에서 제공하는 기능으로 해당 _app.js로 파일명을 가져가면\n//폴더 내 모든파일이(index, profile 등) _app.js를 부모 컴포넌트로 사용함\nimport React from \"react\";\nimport AppLayout from \"../components/AppLayout\";\nimport PropTypes from \"prop-types\";\nimport Head from \"next/head\";\nimport reducer from \"../reducers\";\nimport { Provider } from \"react-redux\";\nimport { createStore, compose, applyMiddleware } from \"redux\";\nimport withRedux from \"next-redux-wrapper\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport sagaMiddleware from \"../sagas/middleware\";\nimport rootSaga from \"../sagas\"; // const store = createStore(reducer); 빼고 {component, store } 이렇게 해야하나?\n\nvar NodeBird = function NodeBird(_ref) {\n  var Component = _ref.Component;\n  var store = createStore(reducer);\n  return (// <provider>태그로 감싸면 라우터 작동안됨\n    __jsx(React.Fragment, null, __jsx(Head, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 7\n      }\n    }, __jsx(\"title\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }\n    }, \"NodeBird\"), __jsx(\"link\", {\n      rel: \"stylesheet\",\n      href: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.18.1/antd.css\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }\n    }), __jsx(\"script\", {\n      src: \"http://cdnjs.cloutflare.com/ajax/libs/antd/3.18.1/antd.js\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }\n    })), __jsx(AppLayout, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 7\n      }\n    }, __jsx(Component, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }\n    })))\n  );\n  NodeBird.propTypes = {\n    // node: JSX에 들어갈 수 있는 모든 것들(문자열, 컴포넌트 등)\n    // elementType: 컴포넌트 자체\n    Component: PropTypes.elementType,\n    store: PropTypes.object\n  };\n};\n\n_c = NodeBird;\n\nvar middleware = function middleware(store) {\n  return function (next) {\n    return function (action) {\n      console.log(action); // 다른 작업들을 여기에서\n\n      next(action);\n    };\n  };\n};\n\nconnect(mapStateToProps)(Component)(Component);\nhoc(Component);\n\nvar hoc = function hoc(mapStateToProps) {\n  return function () {\n    console.log('i', hoc);\n    return __jsx(Component, {\n      hello: \"i'm hoc\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 5\n      }\n    });\n  };\n}; // nodeBird에 스토어 삽입, 미들웨어 삽입(하단코드 고정)\n\n\nexport default withRedux(function (initialState, options) {\n  var middlewares = [sagaMiddleware];\n  var enhancer = false ? compose(applyMiddleware.apply(void 0, middlewares)) : composeWithDevTools(applyMiddleware.apply(void 0, middlewares)); // const enhancer = compose(\n  //   applyMiddleware(...middlewares),\n  //   !options.isServer &&\n  //     typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== \"undefined\"\n  //     ? window.__REDUX_DEVTOOLS_EXTENSION__()\n  //     : f => f\n  // );\n\n  var store = createStore(reducer, initialState, enhancer);\n  sagaMiddleware.run(rootSaga);\n  return store;\n})(NodeBird); //페이지들의 공통적인 부분을 모아놓음\n//<Component/>는 자식컴포넌트에서 가져오는 것임(next기능)\n\nvar _c;\n\n$RefreshReg$(_c, \"NodeBird\");","map":{"version":3,"sources":["C:/Users/arthu/Documents/react-nodebird/front/pages/_app.js"],"names":["React","AppLayout","PropTypes","Head","reducer","Provider","createStore","compose","applyMiddleware","withRedux","composeWithDevTools","sagaMiddleware","rootSaga","NodeBird","Component","store","propTypes","elementType","object","middleware","next","action","console","log","connect","mapStateToProps","hoc","initialState","options","middlewares","enhancer","run"],"mappings":";;;;AAAA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,WAAT,EAAsBC,OAAtB,EAA+BC,eAA/B,QAAsD,OAAtD;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AACA,OAAOC,QAAP,MAAqB,UAArB,C,CAEA;;AACA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAAmB;AAAA,MAAhBC,SAAgB,QAAhBA,SAAgB;AAClC,MAAMC,KAAK,GAAGT,WAAW,CAACF,OAAD,CAAzB;AACA,SACE;AACA,gCACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE;AACE,MAAA,GAAG,EAAC,YADN;AAEE,MAAA,IAAI,EAAC,6DAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAME;AAAQ,MAAA,GAAG,EAAC,2DAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,CADF,EASE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CATF;AAFF;AAiBAS,EAAAA,QAAQ,CAACG,SAAT,GAAqB;AACnB;AACA;AACAF,IAAAA,SAAS,EAAEZ,SAAS,CAACe,WAHF;AAInBF,IAAAA,KAAK,EAAEb,SAAS,CAACgB;AAJE,GAArB;AAMD,CAzBD;;KAAML,Q;;AA2BN,IAAMM,UAAU,GAAG,SAAbA,UAAa,CAAAJ,KAAK;AAAA,SAAI,UAAAK,IAAI;AAAA,WAAI,UAAAC,MAAM,EAAI;AAC5CC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ,EAD4C,CACvB;;AACrBD,MAAAA,IAAI,CAACC,MAAD,CAAJ;AACD,KAH+B;AAAA,GAAR;AAAA,CAAxB;;AAKAG,OAAO,CAACC,eAAD,CAAP,CAAyBX,SAAzB,EAAoCA,SAApC;AACAY,GAAG,CAACZ,SAAD,CAAH;;AAEA,IAAMY,GAAG,GAAG,SAANA,GAAM,CAACD,eAAD;AAAA,SAAqB,YAAM;AACrCH,IAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ,EAAiBG,GAAjB;AACA,WACE,MAAC,SAAD;AAAW,MAAA,KAAK,EAAC,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD,GALW;AAAA,CAAZ,C,CAOA;;;AACA,eAAejB,SAAS,CAAC,UAACkB,YAAD,EAAeC,OAAf,EAA2B;AAClD,MAAMC,WAAW,GAAG,CAAClB,cAAD,CAApB;AACA,MAAMmB,QAAQ,GACZ,QACIvB,OAAO,CAACC,eAAe,MAAf,SAAmBqB,WAAnB,CAAD,CADX,GAEInB,mBAAmB,CAACF,eAAe,MAAf,SAAmBqB,WAAnB,CAAD,CAHzB,CAFkD,CAMlD;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMd,KAAK,GAAGT,WAAW,CAACF,OAAD,EAAUuB,YAAV,EAAwBG,QAAxB,CAAzB;AACAnB,EAAAA,cAAc,CAACoB,GAAf,CAAmBnB,QAAnB;AACA,SAAOG,KAAP;AACD,CAhBuB,CAAT,CAgBZF,QAhBY,CAAf,C,CAkBA;AACA","sourcesContent":["//next에서 제공하는 기능으로 해당 _app.js로 파일명을 가져가면\r\n//폴더 내 모든파일이(index, profile 등) _app.js를 부모 컴포넌트로 사용함\r\nimport React from \"react\";\r\nimport AppLayout from \"../components/AppLayout\";\r\nimport PropTypes from \"prop-types\";\r\nimport Head from \"next/head\";\r\nimport reducer from \"../reducers\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, compose, applyMiddleware } from \"redux\";\r\nimport withRedux from \"next-redux-wrapper\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport sagaMiddleware from \"../sagas/middleware\";\r\nimport rootSaga from \"../sagas\";\r\n\r\n// const store = createStore(reducer); 빼고 {component, store } 이렇게 해야하나?\r\nconst NodeBird = ({ Component }) => {\r\n  const store = createStore(reducer);\r\n  return (\r\n    // <provider>태그로 감싸면 라우터 작동안됨\r\n    <>\r\n      <Head>\r\n        <title>NodeBird</title>\r\n        <link\r\n          rel=\"stylesheet\"\r\n          href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.18.1/antd.css\"\r\n        />\r\n        <script src=\"http://cdnjs.cloutflare.com/ajax/libs/antd/3.18.1/antd.js\" />\r\n      </Head>\r\n      <AppLayout>\r\n        {/* 다른 컴포넌트들을 의미 */}\r\n        <Component></Component>\r\n      </AppLayout>\r\n    </>\r\n  );\r\n  NodeBird.propTypes = {\r\n    // node: JSX에 들어갈 수 있는 모든 것들(문자열, 컴포넌트 등)\r\n    // elementType: 컴포넌트 자체\r\n    Component: PropTypes.elementType,\r\n    store: PropTypes.object,\r\n  };\r\n};\r\n\r\nconst middleware = store => next => action => {\r\n  console.log(action); // 다른 작업들을 여기에서\r\n  next(action);\r\n};\r\n\r\nconnect(mapStateToProps)(Component)(Component)\r\nhoc(Component);\r\n\r\nconst hoc = (mapStateToProps) => () => {\r\n  console.log('i', hoc)\r\n  return(\r\n    <Component hello=\"i'm hoc\" />\r\n  )\r\n}\r\n\r\n// nodeBird에 스토어 삽입, 미들웨어 삽입(하단코드 고정)\r\nexport default withRedux((initialState, options) => {\r\n  const middlewares = [sagaMiddleware];\r\n  const enhancer =\r\n    process.env.NODE_ENV === \"production\"\r\n      ? compose(applyMiddleware(...middlewares))\r\n      : composeWithDevTools(applyMiddleware(...middlewares));\r\n  // const enhancer = compose(\r\n  //   applyMiddleware(...middlewares),\r\n  //   !options.isServer &&\r\n  //     typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== \"undefined\"\r\n  //     ? window.__REDUX_DEVTOOLS_EXTENSION__()\r\n  //     : f => f\r\n  // );\r\n  const store = createStore(reducer, initialState, enhancer);\r\n  sagaMiddleware.run(rootSaga);\r\n  return store;\r\n})(NodeBird);\r\n\r\n//페이지들의 공통적인 부분을 모아놓음\r\n//<Component/>는 자식컴포넌트에서 가져오는 것임(next기능)\r\n"]},"metadata":{},"sourceType":"module"}