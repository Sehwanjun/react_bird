{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(login),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(hello),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchHello),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, takeLatest, takeEvery, call, put, take, delay } from \"redux-saga/effects\";\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from \"../reducers/user\";\nvar HELLO_SAGA = \"HELLO_SAGA\";\n\nfunction loginAPI() {// 서버에 요청을 보내는 부분\n}\n\nfunction login() {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loginAPI);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          _context.next = 12;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          // loginAPI 실패시\n          console.error(_context.t0);\n          _context.next = 12;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(LOG_IN, login);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction hello() {\n  return _regeneratorRuntime.wrap(function hello$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return delay(1000);\n\n        case 2:\n          _context3.next = 4;\n          return put({\n            type: \"BYE_SAGA\"\n          });\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n} // 1. login 요청을 해서 상단의 login함수(LOG_IN액션 실행)\n// 실행되게 함(비동기동작 위한 대기) 만약 그러면 LOG_IN_SUCCESS 실행\n// 반복문 넣는 이유: 예를들어 빼면 로그아웃후 다시 로그인시 작동불가 방지\n// function* watchLogin() {\n//   while (true) {\n//     yield take(LOG_IN);\n//     yield delay(2000);\n//     // put: saga의 dispatch\n//     put({\n//       type: LOG_IN_SUCCESS,\n//     });\n//   }\n// }\n//연속으로 값 막 누르면 마지막것만 적용해서 유효하게 하겠다면 takeLatest\n//매번 연결시키려면 (while(true))처럼 -> takeevery\n//로그인버튼 두번클릭시 실수니깐(takelatest로 쓰는게 나을듯)\n//반면 카운트같은 경우 모든클릭 유효하니 takeevery를 쓰는것\n\n\nfunction watchHello() {\n  return _regeneratorRuntime.wrap(function watchHello$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(HELLO_SAGA, hello);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n} // call, fork는 함수를 실행시켜 줌\n// call은 동기호출, fork는 비동기호출\n// call은 응답을 받을때까지 기다림\n// fork는 순서상관없이 그냥 바로 실행시킴(안써도 상관없는데 )\n\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogin), fork(watchHello)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/Users/arthu/Documents/react-nodebird/front/sagas/user.js"],"names":["login","watchLogin","hello","watchHello","userSaga","all","takeLatest","takeEvery","call","put","take","delay","LOG_IN","LOG_IN_SUCCESS","LOG_IN_FAILURE","HELLO_SAGA","loginAPI","type","console","error","fork"],"mappings":";;oDAiBUA,K;qDAiBAC,U;qDAIAC,K;qDAyBAC,U;qDASeC,Q;;AAxEzB,SACEC,GADF,EAEEC,UAFF,EAGEC,SAHF,EAIEC,IAJF,EAKEC,GALF,EAMEC,IANF,EAOEC,KAPF,QAQO,oBARP;AASA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,cAAjC,QAAuD,kBAAvD;AAEA,IAAMC,UAAU,GAAG,YAAnB;;AAEA,SAASC,QAAT,GAAoB,CAClB;AACD;;AAED,SAAUhB,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGI,iBAAMQ,IAAI,CAACQ,QAAD,CAAV;;AAHJ;AAAA;AAKI,iBAAMP,GAAG,CAAC;AACRQ,YAAAA,IAAI,EAAEJ;AADE,WAAD,CAAT;;AALJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AASI;AACAK,UAAAA,OAAO,CAACC,KAAR;AAVJ;AAWI,iBAAMV,GAAG,CAAC;AACRQ,YAAAA,IAAI,EAAEH;AADE,WAAD,CAAT;;AAXJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAUb,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMM,SAAS,CAACK,MAAD,EAASZ,KAAT,CAAf;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUE,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMS,KAAK,CAAC,IAAD,CAAX;;AADF;AAAA;AAEE,iBAAMF,GAAG,CAAC;AACRQ,YAAAA,IAAI,EAAE;AADE,WAAD,CAAT;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAUd,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMG,UAAU,CAACS,UAAD,EAAab,KAAb,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAIA;AACA;AACA;AACA;;;AAEA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACe,IAAI,CAACnB,UAAD,CAAL,EAAmBmB,IAAI,CAACjB,UAAD,CAAvB,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {\r\n  all,\r\n  takeLatest,\r\n  takeEvery,\r\n  call,\r\n  put,\r\n  take,\r\n  delay,\r\n} from \"redux-saga/effects\";\r\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from \"../reducers/user\";\r\n\r\nconst HELLO_SAGA = \"HELLO_SAGA\";\r\n\r\nfunction loginAPI() {\r\n  // 서버에 요청을 보내는 부분\r\n}\r\n\r\nfunction* login() {\r\n  try {\r\n    //순서를 지켜서 함수를 실행할 땐 call\r\n    yield call(loginAPI);\r\n    // put은 dispatch와 동일\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n    });\r\n  } catch (e) {\r\n    // loginAPI 실패시\r\n    console.error(e);\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogin() {\r\n  yield takeEvery(LOG_IN, login);\r\n}\r\n\r\nfunction* hello() {\r\n  yield delay(1000);\r\n  yield put({\r\n    type: \"BYE_SAGA\",\r\n  });\r\n}\r\n\r\n// 1. login 요청을 해서 상단의 login함수(LOG_IN액션 실행)\r\n// 실행되게 함(비동기동작 위한 대기) 만약 그러면 LOG_IN_SUCCESS 실행\r\n// 반복문 넣는 이유: 예를들어 빼면 로그아웃후 다시 로그인시 작동불가 방지\r\n\r\n// function* watchLogin() {\r\n//   while (true) {\r\n//     yield take(LOG_IN);\r\n//     yield delay(2000);\r\n//     // put: saga의 dispatch\r\n//     put({\r\n//       type: LOG_IN_SUCCESS,\r\n//     });\r\n//   }\r\n// }\r\n//연속으로 값 막 누르면 마지막것만 적용해서 유효하게 하겠다면 takeLatest\r\n//매번 연결시키려면 (while(true))처럼 -> takeevery\r\n//로그인버튼 두번클릭시 실수니깐(takelatest로 쓰는게 나을듯)\r\n//반면 카운트같은 경우 모든클릭 유효하니 takeevery를 쓰는것\r\nfunction* watchHello() {\r\n  yield takeLatest(HELLO_SAGA, hello);\r\n}\r\n\r\n// call, fork는 함수를 실행시켜 줌\r\n// call은 동기호출, fork는 비동기호출\r\n// call은 응답을 받을때까지 기다림\r\n// fork는 순서상관없이 그냥 바로 실행시킴(안써도 상관없는데 )\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLogin), fork(watchHello)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}