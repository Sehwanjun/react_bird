{"ast":null,"code":"import { all, takeLatest, takeEvery, call, put, take } from \"redux-saga/effects\";\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from \"../reducers/user\";\nconst HELLO_SAGA = \"HELLO_SAGA\";\n\nfunction loginAPI() {// 서버에 요청을 보내는 부분\n}\n\nfunction* login() {\n  try {\n    yield call(loginAPI); // put은 dispatch와 동일\n\n    yield put({\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패시\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n} // 1. login 요청을 해서 상단의 login함수(LOG_IN액션 실행)\n// 실행되게 함(비동기동작 위한 대기) 만약 그러면 LOG_IN_SUCCESS 실행\n// 반복문 넣는 이유: 예를들어 빼면 로그아웃후 다시 로그인시 작동불가 방지\n\n\nfunction* watchLogin() {\n  while (true) {\n    yield take(LOG_IN);\n    yield delay(2000); // put: saga의 dispatch\n\n    put({\n      type: LOG_IN_SUCCESS\n    });\n  }\n}\n\nfunction* watchHello() {\n  yield takeEvery(HELLO_SAGA, function* () {\n    console.log(1);\n    console.log(2);\n    console.log(3);\n    console.log(4);\n  });\n} // function* watchHello() {\n//   while (true) {\n//     yield take(HELLO_SAGA);\n//     console.log(1);\n//     console.log(2);\n//     console.log(3);\n//     console.log(4);\n//   }\n// }\n// take: 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트\n// HELLO_SAGA가 불려오면 next를 해준다.(hello saga까지)\n// 하지만 while 하면 무제한 반복(pages/index.js)에 dispatch 많이 복사하면 그 여러개 실행\n// 그리고 for을 통해 횟수를 조절할 수도 있음\n// function* helloSaga() {\n//   console.log(\"before saga\");\n//   // for (let i = 0; i < 5; i++) {\n//   yield take(HELLO_SAGA);\n//   console.log(\"hello saga\");\n//   // }\n// }\n\n\nexport default function* userSaga() {\n  yield all[(watchLogin(), watchHello())];\n}","map":{"version":3,"sources":["C:/Users/arthu/Documents/react-nodebird/front/sagas/user.js"],"names":["all","takeLatest","takeEvery","call","put","take","LOG_IN","LOG_IN_SUCCESS","LOG_IN_FAILURE","HELLO_SAGA","loginAPI","login","type","e","console","error","watchLogin","delay","watchHello","log","userSaga"],"mappings":"AAAA,SACEA,GADF,EAEEC,UAFF,EAGEC,SAHF,EAIEC,IAJF,EAKEC,GALF,EAMEC,IANF,QAOO,oBAPP;AAQA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,cAAjC,QAAuD,kBAAvD;AAEA,MAAMC,UAAU,GAAG,YAAnB;;AAEA,SAASC,QAAT,GAAoB,CAClB;AACD;;AAED,UAAUC,KAAV,GAAkB;AAChB,MAAI;AACF,UAAMR,IAAI,CAACO,QAAD,CAAV,CADE,CAEF;;AACA,UAAMN,GAAG,CAAC;AACRQ,MAAAA,IAAI,EAAEL;AADE,KAAD,CAAT;AAGD,GAND,CAME,OAAOM,CAAP,EAAU;AACV;AACAC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMT,GAAG,CAAC;AACRQ,MAAAA,IAAI,EAAEJ;AADE,KAAD,CAAT;AAGD;AACF,C,CAED;AACA;AACA;;;AAEA,UAAUQ,UAAV,GAAuB;AACrB,SAAO,IAAP,EAAa;AACX,UAAMX,IAAI,CAACC,MAAD,CAAV;AACA,UAAMW,KAAK,CAAC,IAAD,CAAX,CAFW,CAGX;;AACAb,IAAAA,GAAG,CAAC;AACFQ,MAAAA,IAAI,EAAEL;AADJ,KAAD,CAAH;AAGD;AACF;;AAED,UAAUW,UAAV,GAAsB;AACpB,QAAMhB,SAAS,CAACO,UAAD,EAAa,aAAW;AACrCK,IAAAA,OAAO,CAACK,GAAR,CAAY,CAAZ;AACAL,IAAAA,OAAO,CAACK,GAAR,CAAY,CAAZ;AACAL,IAAAA,OAAO,CAACK,GAAR,CAAY,CAAZ;AACAL,IAAAA,OAAO,CAACK,GAAR,CAAY,CAAZ;AACD,GALc,CAAf;AAMD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAe,UAAUC,QAAV,GAAqB;AAClC,QAAMpB,GAAG,EAAEgB,UAAU,IAAIE,UAAU,EAA1B,EAAT;AACD","sourcesContent":["import {\r\n  all,\r\n  takeLatest,\r\n  takeEvery,\r\n  call,\r\n  put,\r\n  take,\r\n} from \"redux-saga/effects\";\r\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from \"../reducers/user\";\r\n\r\nconst HELLO_SAGA = \"HELLO_SAGA\";\r\n\r\nfunction loginAPI() {\r\n  // 서버에 요청을 보내는 부분\r\n}\r\n\r\nfunction* login() {\r\n  try {\r\n    yield call(loginAPI);\r\n    // put은 dispatch와 동일\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n    });\r\n  } catch (e) {\r\n    // loginAPI 실패시\r\n    console.error(e);\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n    });\r\n  }\r\n}\r\n\r\n// 1. login 요청을 해서 상단의 login함수(LOG_IN액션 실행)\r\n// 실행되게 함(비동기동작 위한 대기) 만약 그러면 LOG_IN_SUCCESS 실행\r\n// 반복문 넣는 이유: 예를들어 빼면 로그아웃후 다시 로그인시 작동불가 방지\r\n\r\nfunction* watchLogin() {\r\n  while (true) {\r\n    yield take(LOG_IN);\r\n    yield delay(2000);\r\n    // put: saga의 dispatch\r\n    put({\r\n      type: LOG_IN_SUCCESS,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchHello(){\r\n  yield takeEvery(HELLO_SAGA, function*(){\r\n    console.log(1)\r\n    console.log(2)\r\n    console.log(3)\r\n    console.log(4)\r\n  })\r\n}\r\n\r\n// function* watchHello() {\r\n//   while (true) {\r\n//     yield take(HELLO_SAGA);\r\n//     console.log(1);\r\n//     console.log(2);\r\n//     console.log(3);\r\n//     console.log(4);\r\n//   }\r\n// }\r\n\r\n// take: 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트\r\n// HELLO_SAGA가 불려오면 next를 해준다.(hello saga까지)\r\n// 하지만 while 하면 무제한 반복(pages/index.js)에 dispatch 많이 복사하면 그 여러개 실행\r\n// 그리고 for을 통해 횟수를 조절할 수도 있음\r\n// function* helloSaga() {\r\n//   console.log(\"before saga\");\r\n//   // for (let i = 0; i < 5; i++) {\r\n//   yield take(HELLO_SAGA);\r\n//   console.log(\"hello saga\");\r\n//   // }\r\n// }\r\n\r\nexport default function* userSaga() {\r\n  yield all[(watchLogin(), watchHello())];\r\n}\r\n"]},"metadata":{},"sourceType":"module"}