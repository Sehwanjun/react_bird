{"ast":null,"code":"import { all, takeLatest, takeEvery, call, put, take, delay, fork } from \"redux-saga/effects\";\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE } from \"../reducers/user\"; // API함수 하나, watch함수 하나, watch에서 뭘할지 함수 하나가 세트로\n// watchABC함수를 통해 takeevery일지 latest일지 실행주기 정의하고\n// 그다음에 ABC함수를 실행하는 패턴임\n// 서버에 요청을 보내는 부분\n\nfunction signUpAPI() {\n  return axios.post(\"/login\");\n} // try, catch 사용이유: API를 받지 못할 수 있으므로\n// 에러날 가능성이 있을 경우 모듈을 살리기 위함\n//순서를 지켜서 함수를 실행할 땐 call\n// put은 dispatch와 동일\n\n\nfunction* signUp() {\n  try {\n    yield call(loginAPI);\n    yield fork(logger);\n    yield put({\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN_REQUEST, login);\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n} // 1. login 요청을 해서 상단의 login함수(LOG_IN액션 실행)\n// 실행되게 함(비동기동작 위한 대기) 만약 그러면 LOG_IN_SUCCESS 실행\n// 반복문 넣는 이유: 예를들어 빼면 로그아웃후 다시 로그인시 작동불가 방지\n// function* watchLogin() {\n//   while (true) {\n//     yield take(LOG_IN);\n//     yield delay(2000);\n//     // put: saga의 dispatch\n//     put({\n//       type: LOG_IN_SUCCESS,\n//     });\n//   }\n// }\n//연속으로 값 막 누르면 마지막것만 적용해서 유효하게 하겠다면 takeLatest\n//매번 연결시키려면 (while(true))처럼 -> takeevery\n//로그인버튼 두번클릭시 실수니깐(takelatest로 쓰는게 나을듯)\n//반면 카운트같은 경우 모든클릭 유효하니 takeevery를 쓰는것\n// call, fork는 함수를 실행시켜 줌\n// call은 동기호출, fork는 비동기호출\n// call은 응답을 받을때까지 기다림\n// fork는 순서상관없이 그냥 바로 실행시킴(안써도 상관없는데 써야함)\n\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/Users/arthu/Documents/react-nodebird/front/sagas/user.js"],"names":["all","takeLatest","takeEvery","call","put","take","delay","fork","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","signUpAPI","axios","post","signUp","loginAPI","logger","type","e","console","error","watchLogin","login","watchSignUp","SIGN_UP_REQUEST","userSaga"],"mappings":"AAAA,SACEA,GADF,EAEEC,UAFF,EAGEC,SAHF,EAIEC,IAJF,EAKEC,GALF,EAMEC,IANF,EAOEC,KAPF,EAQEC,IARF,QASO,oBATP;AAUA,SACEC,cADF,EAEEC,cAFF,EAGEC,cAHF,QAIO,kBAJP,C,CAMA;AACA;AACA;AACA;;AACA,SAASC,SAAT,GAAqB;AACnB,SAAOC,KAAK,CAACC,IAAN,CAAW,QAAX,CAAP;AACD,C,CAED;AACA;AACA;AACA;;;AACA,UAAUC,MAAV,GAAmB;AACjB,MAAI;AACF,UAAMX,IAAI,CAACY,QAAD,CAAV;AACA,UAAMR,IAAI,CAACS,MAAD,CAAV;AAEA,UAAMZ,GAAG,CAAC;AACRa,MAAAA,IAAI,EAAER;AADE,KAAD,CAAT;AAGD,GAPD,CAOE,OAAOS,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMd,GAAG,CAAC;AACRa,MAAAA,IAAI,EAAEP;AADE,KAAD,CAAT;AAGD;AACF;;AAED,UAAUW,UAAV,GAAuB;AACrB,QAAMnB,SAAS,CAACM,cAAD,EAAiBc,KAAjB,CAAf;AACD;;AAED,UAAUC,WAAV,GAAwB;AACtB,QAAMrB,SAAS,CAACsB,eAAD,EAAkBV,MAAlB,CAAf;AACD,C,CACD;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEA,eAAe,UAAUW,QAAV,GAAqB;AAClC,QAAMzB,GAAG,CAAC,CAACO,IAAI,CAACc,UAAD,CAAL,EAAmBd,IAAI,CAACgB,WAAD,CAAvB,CAAD,CAAT;AACD","sourcesContent":["import {\r\n  all,\r\n  takeLatest,\r\n  takeEvery,\r\n  call,\r\n  put,\r\n  take,\r\n  delay,\r\n  fork,\r\n} from \"redux-saga/effects\";\r\nimport {\r\n  LOG_IN_REQUEST,\r\n  LOG_IN_SUCCESS,\r\n  LOG_IN_FAILURE,\r\n} from \"../reducers/user\";\r\n\r\n// API함수 하나, watch함수 하나, watch에서 뭘할지 함수 하나가 세트로\r\n// watchABC함수를 통해 takeevery일지 latest일지 실행주기 정의하고\r\n// 그다음에 ABC함수를 실행하는 패턴임\r\n// 서버에 요청을 보내는 부분\r\nfunction signUpAPI() {\r\n  return axios.post(\"/login\");\r\n}\r\n\r\n// try, catch 사용이유: API를 받지 못할 수 있으므로\r\n// 에러날 가능성이 있을 경우 모듈을 살리기 위함\r\n//순서를 지켜서 함수를 실행할 땐 call\r\n// put은 dispatch와 동일\r\nfunction* signUp() {\r\n  try {\r\n    yield call(loginAPI);\r\n    yield fork(logger);\r\n    \r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogin() {\r\n  yield takeEvery(LOG_IN_REQUEST, login);\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\r\n}\r\n// 1. login 요청을 해서 상단의 login함수(LOG_IN액션 실행)\r\n// 실행되게 함(비동기동작 위한 대기) 만약 그러면 LOG_IN_SUCCESS 실행\r\n// 반복문 넣는 이유: 예를들어 빼면 로그아웃후 다시 로그인시 작동불가 방지\r\n\r\n// function* watchLogin() {\r\n//   while (true) {\r\n//     yield take(LOG_IN);\r\n//     yield delay(2000);\r\n//     // put: saga의 dispatch\r\n//     put({\r\n//       type: LOG_IN_SUCCESS,\r\n//     });\r\n//   }\r\n// }\r\n//연속으로 값 막 누르면 마지막것만 적용해서 유효하게 하겠다면 takeLatest\r\n//매번 연결시키려면 (while(true))처럼 -> takeevery\r\n//로그인버튼 두번클릭시 실수니깐(takelatest로 쓰는게 나을듯)\r\n//반면 카운트같은 경우 모든클릭 유효하니 takeevery를 쓰는것\r\n\r\n// call, fork는 함수를 실행시켜 줌\r\n// call은 동기호출, fork는 비동기호출\r\n// call은 응답을 받을때까지 기다림\r\n// fork는 순서상관없이 그냥 바로 실행시킴(안써도 상관없는데 써야함)\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLogin), fork(watchSignUp)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}