{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// 초기값(추후 dummy값을 이쪽으로 옮겨야 함)\nconst dummyUser = {\n  nickname: \"제로초\",\n  Post: [],\n  Followings: [],\n  Followers: [],\n  signUpData: {}\n};\nexport const initialState = {\n  isLoggedIn: false,\n  //로그인 여부\n  isLoggedOut: false,\n  // 로그아웃 시도중\n  isLoggingIn: false,\n  // 로그인 시도중\n  logInErrorReason: \"\",\n  // 로그인 에러 사유\n  signedUp: false,\n  // 회원가입 성공\n  isSigningUp: false,\n  // 회원가입 시도중\n  signUpErrorReason: \"\",\n  // 회원가입 실패 사유\n  me: null,\n  followingList: [],\n  //팔로잉 리스트\n  followerList: [],\n  // 팔로우 리스트\n  userInfo: null //남의 정보\n\n}; //action명 - 비동기(서버쪽 응답필요한) - request,succ,fail 3개, 동기는(서버필요X) 1개\n// 서버쪽 응답 필요하다면 redux saga까지..\n\nexport const SIGN_UP_REQUEST = \"SIGN_UP_REQUEST\";\nexport const SIGN_UP_SUCCESS = \"SIGN_UP_SUCCESS\";\nexport const SIGN_UP_FAILURE = \"SIGN_UP_FAILURE\";\nexport const LOG_IN_REQUEST = \"LOG_IN_REQUEST\";\nexport const LOG_IN_SUCCESS = \"LOG_IN_SUCCESS\";\nexport const LOG_IN_FAILURE = \"LOG_IN_FAILURE\"; // 로그인 후 사용자 정보 불러오기\n\nexport const LOAD_USER_REQUEST = \"LOAD_USER_REQUEST\";\nexport const LOAD_USER_SUCCESS = \"LOAD_USER_SUCCESS\";\nexport const LOAD_USER_FAILURE = \"LOAD_USER_FAILURE\";\nexport const LOG_OUT_REQUEST = \"LOG_OUT_REQUEST\";\nexport const LOG_OUT_SUCCESS = \"LOG_OUT_SUCCESS\";\nexport const LOG_OUT_FAILURE = \"LOG_OUT_FAILURE\"; // 다른사람 팔로우\n\nexport const FOLLOW_USER_REQUEST = \"FOLLOW_USER_REQUEST\";\nexport const FOLLOW_USER_SUCCESS = \"FOLLOW_USER_SUCCESS\";\nexport const FOLLOW_USER_FAILURE = \"FOLLOW_USER_FAILURE\"; // 팔로우, 팔로잉 친구들 불러오기\n\nexport const LOAD_FOLLOW_REQUEST = \"LOAD_FOLLOW_REQUEST\";\nexport const LOAD_FOLLOW_SUCCESS = \"LOAD_FOLLOW_SUCCESS\";\nexport const LOAD_FOLLOW_FAILURE = \"LOAD_FOLLOW_FAILURE\"; // 다른사람 언팔로우 하기\n\nexport const UNFOLLOW_USER_REQUEST = \"UNFOLLOW_USER_REQUEST\";\nexport const UNFOLLOW_USER_SUCCESS = \"UNFOLLOW_USER_SUCCESS\";\nexport const UNFOLLOW_USER_FAILURE = \"UNFOLLOW_USER_FAILURE\"; // 내 팔로워 제거하기(이상한 사람 삭제)\n\nexport const REMOVE_FOLLOWER_REQUEST = \"REMOVE_FOLLOWER_REQUEST\";\nexport const REMOVE_FOLLOWER_SUCCESS = \"REMOVE_FOLLOWER_SUCCESS\";\nexport const REMOVE_FOLLOWER_FAILURE = \"REMOVE_FOLLOWER_FAILURE\";\nexport const ADD_POST_TO_ME = \"ADD_POST_TO_ME\"; //action 정의\n// export const signUpAction = data => {\n//   return {\n//     type: SIGN_UP_REQUEST,\n//     data,\n//   };\n// };\n// export const signUpSuccess = {\n//   type: SIGN_UP_SUCCESS,\n// };\n// export const loginRequestAction = data => {\n//   return {\n//     type: LOG_IN_REQUEST,\n//     data,\n//   };\n// };\n// export const logoutRequestAction = {\n//   type: LOG_OUT_REQUEST,\n// };\n// export const logInSuccess = {\n//   type: LOG_IN_SUCCESS,\n// };\n// 동적데이터는 함수를 통해 넣어야 함\n// ({}) 이건 바로 return하는 것 생략문법\n// export const signUpRequestAction = data => ({\n//   type: SIGN_UP_REQUEST,\n//   data: data,\n// });\n\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case LOG_IN_REQUEST:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isLoggingIn: true,\n          isLoading: true,\n          logInErrorReason: \"\"\n        });\n      }\n\n    case LOG_IN_SUCCESS:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isLoggingIn: false,\n          isLoggedIn: true,\n          me: dummyUser,\n          isLoading: false\n        });\n      }\n\n    case LOG_IN_FAILURE:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isLoggingIn: false,\n          isLoggedIn: false,\n          logInErrorReason: action.error,\n          me: null\n        });\n      }\n\n    case LOG_OUT_REQUEST:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isLoggedIn: false,\n          user: null\n        });\n      }\n\n    case SIGN_UP_REQUEST:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          signUpData: action.data\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n});","map":{"version":3,"sources":["C:/Users/arthu/Documents/react-nodebird/front/reducers/user.js"],"names":["dummyUser","nickname","Post","Followings","Followers","signUpData","initialState","isLoggedIn","isLoggedOut","isLoggingIn","logInErrorReason","signedUp","isSigningUp","signUpErrorReason","me","followingList","followerList","userInfo","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","FOLLOW_USER_REQUEST","FOLLOW_USER_SUCCESS","FOLLOW_USER_FAILURE","LOAD_FOLLOW_REQUEST","LOAD_FOLLOW_SUCCESS","LOAD_FOLLOW_FAILURE","UNFOLLOW_USER_REQUEST","UNFOLLOW_USER_SUCCESS","UNFOLLOW_USER_FAILURE","REMOVE_FOLLOWER_REQUEST","REMOVE_FOLLOWER_SUCCESS","REMOVE_FOLLOWER_FAILURE","ADD_POST_TO_ME","state","action","type","isLoading","error","user","data"],"mappings":"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","sourcesContent":["// 초기값(추후 dummy값을 이쪽으로 옮겨야 함)\r\nconst dummyUser = {\r\n  nickname: \"제로초\",\r\n  Post: [],\r\n  Followings: [],\r\n  Followers: [],\r\n  signUpData: {},\r\n};\r\n\r\nexport const initialState = {\r\n  isLoggedIn: false, //로그인 여부\r\n  isLoggedOut: false, // 로그아웃 시도중\r\n  isLoggingIn: false, // 로그인 시도중\r\n  logInErrorReason: \"\", // 로그인 에러 사유\r\n  signedUp: false, // 회원가입 성공\r\n  isSigningUp: false, // 회원가입 시도중\r\n  signUpErrorReason: \"\", // 회원가입 실패 사유\r\n  me: null,\r\n  followingList: [], //팔로잉 리스트\r\n  followerList: [], // 팔로우 리스트\r\n  userInfo: null, //남의 정보\r\n};\r\n\r\n//action명 - 비동기(서버쪽 응답필요한) - request,succ,fail 3개, 동기는(서버필요X) 1개\r\n// 서버쪽 응답 필요하다면 redux saga까지..\r\n\r\nexport const SIGN_UP_REQUEST = \"SIGN_UP_REQUEST\";\r\nexport const SIGN_UP_SUCCESS = \"SIGN_UP_SUCCESS\";\r\nexport const SIGN_UP_FAILURE = \"SIGN_UP_FAILURE\";\r\n\r\nexport const LOG_IN_REQUEST = \"LOG_IN_REQUEST\";\r\nexport const LOG_IN_SUCCESS = \"LOG_IN_SUCCESS\";\r\nexport const LOG_IN_FAILURE = \"LOG_IN_FAILURE\";\r\n\r\n// 로그인 후 사용자 정보 불러오기\r\nexport const LOAD_USER_REQUEST = \"LOAD_USER_REQUEST\";\r\nexport const LOAD_USER_SUCCESS = \"LOAD_USER_SUCCESS\";\r\nexport const LOAD_USER_FAILURE = \"LOAD_USER_FAILURE\";\r\n\r\nexport const LOG_OUT_REQUEST = \"LOG_OUT_REQUEST\";\r\nexport const LOG_OUT_SUCCESS = \"LOG_OUT_SUCCESS\";\r\nexport const LOG_OUT_FAILURE = \"LOG_OUT_FAILURE\";\r\n\r\n// 다른사람 팔로우\r\nexport const FOLLOW_USER_REQUEST = \"FOLLOW_USER_REQUEST\";\r\nexport const FOLLOW_USER_SUCCESS = \"FOLLOW_USER_SUCCESS\";\r\nexport const FOLLOW_USER_FAILURE = \"FOLLOW_USER_FAILURE\";\r\n\r\n// 팔로우, 팔로잉 친구들 불러오기\r\nexport const LOAD_FOLLOW_REQUEST = \"LOAD_FOLLOW_REQUEST\";\r\nexport const LOAD_FOLLOW_SUCCESS = \"LOAD_FOLLOW_SUCCESS\";\r\nexport const LOAD_FOLLOW_FAILURE = \"LOAD_FOLLOW_FAILURE\";\r\n\r\n// 다른사람 언팔로우 하기\r\nexport const UNFOLLOW_USER_REQUEST = \"UNFOLLOW_USER_REQUEST\";\r\nexport const UNFOLLOW_USER_SUCCESS = \"UNFOLLOW_USER_SUCCESS\";\r\nexport const UNFOLLOW_USER_FAILURE = \"UNFOLLOW_USER_FAILURE\";\r\n\r\n// 내 팔로워 제거하기(이상한 사람 삭제)\r\nexport const REMOVE_FOLLOWER_REQUEST = \"REMOVE_FOLLOWER_REQUEST\";\r\nexport const REMOVE_FOLLOWER_SUCCESS = \"REMOVE_FOLLOWER_SUCCESS\";\r\nexport const REMOVE_FOLLOWER_FAILURE = \"REMOVE_FOLLOWER_FAILURE\";\r\n\r\nexport const ADD_POST_TO_ME = \"ADD_POST_TO_ME\";\r\n\r\n//action 정의\r\n// export const signUpAction = data => {\r\n//   return {\r\n//     type: SIGN_UP_REQUEST,\r\n//     data,\r\n//   };\r\n// };\r\n\r\n// export const signUpSuccess = {\r\n//   type: SIGN_UP_SUCCESS,\r\n// };\r\n\r\n// export const loginRequestAction = data => {\r\n//   return {\r\n//     type: LOG_IN_REQUEST,\r\n//     data,\r\n//   };\r\n// };\r\n\r\n// export const logoutRequestAction = {\r\n//   type: LOG_OUT_REQUEST,\r\n// };\r\n\r\n// export const logInSuccess = {\r\n//   type: LOG_IN_SUCCESS,\r\n// };\r\n\r\n// 동적데이터는 함수를 통해 넣어야 함\r\n// ({}) 이건 바로 return하는 것 생략문법\r\n// export const signUpRequestAction = data => ({\r\n//   type: SIGN_UP_REQUEST,\r\n//   data: data,\r\n// });\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case LOG_IN_REQUEST: {\r\n      return {\r\n        ...state,\r\n        isLoggingIn: true,\r\n        isLoading: true,\r\n        logInErrorReason: \"\",\r\n      };\r\n    }\r\n    case LOG_IN_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        isLoggingIn: false,\r\n        isLoggedIn: true,\r\n        me: dummyUser,\r\n        isLoading: false,\r\n      };\r\n    }\r\n    case LOG_IN_FAILURE: {\r\n      return {\r\n        ...state,\r\n        isLoggingIn: false,\r\n        isLoggedIn: false,\r\n        logInErrorReason: action.error,\r\n        me: null,\r\n      };\r\n    }\r\n    case LOG_OUT_REQUEST: {\r\n      return {\r\n        ...state,\r\n        isLoggedIn: false,\r\n        user: null,\r\n      };\r\n    }\r\n    case SIGN_UP_REQUEST: {\r\n      return {\r\n        ...state,\r\n        signUpData: action.data,\r\n      };\r\n    }\r\n    default: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}