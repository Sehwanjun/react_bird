{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// 초기값(추후 dummy값을 이쪽으로 옮겨야 함)\nconst dummyUser = {\n  nickname: \"제로초\",\n  Post: [],\n  Followings: [],\n  Followers: [],\n  signUpData: {\n    id: \"\",\n    nickname: \"\",\n    password: \"\"\n  }\n};\nexport const initialState = {\n  isLoggedIn: false,\n  user: null\n}; //action명\n\nexport const LOG_IN = \"LOG_IN\";\nexport const LOG_OUT = \"LOG_OUT\";\nexport const SIGN_UP = \"SIGN_UP\";\nexport const SIGN_UP_ID = \"SIGN_UP_ID\";\nexport const SIGN_UP_NICK = \"SIGN_UP_NICK\";\nexport const SIGN_UP_PASSWORD = \"SIGN_UP_PASSWORD\"; //action 정의\n\nexport const loginAction = {\n  type: LOG_IN\n};\nexport const logoutAction = {\n  type: LOG_OUT\n}; // 동적데이터는 함수를 통해 넣어야 함\n\nexport const signUpAction = data => {\n  return {\n    type: SIGN_UP,\n    data: data\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOG_IN:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isLoggedIn: true,\n          user: dummyUser\n        });\n      }\n\n    case LOG_OUT:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isLoggedIn: false,\n          user: null\n        });\n      }\n\n    case SIGN_UP:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          signUpData: action.data\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default redu;","map":{"version":3,"sources":["C:/Users/arthu/Documents/react-nodebird/front/reducers/user.js"],"names":["dummyUser","nickname","Post","Followings","Followers","signUpData","id","password","initialState","isLoggedIn","user","LOG_IN","LOG_OUT","SIGN_UP","SIGN_UP_ID","SIGN_UP_NICK","SIGN_UP_PASSWORD","loginAction","type","logoutAction","signUpAction","data","reducer","state","action","redu"],"mappings":";;;;;;AAAA;AACA,MAAMA,SAAS,GAAG;AAChBC,EAAAA,QAAQ,EAAE,KADM;AAEhBC,EAAAA,IAAI,EAAE,EAFU;AAGhBC,EAAAA,UAAU,EAAE,EAHI;AAIhBC,EAAAA,SAAS,EAAE,EAJK;AAKhBC,EAAAA,UAAU,EAAE;AACVC,IAAAA,EAAE,EAAE,EADM;AAEVL,IAAAA,QAAQ,EAAE,EAFA;AAGVM,IAAAA,QAAQ,EAAE;AAHA;AALI,CAAlB;AAYA,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,UAAU,EAAE,KADc;AAE1BC,EAAAA,IAAI,EAAE;AAFoB,CAArB,C,CAKP;;AACA,OAAO,MAAMC,MAAM,GAAG,QAAf;AACP,OAAO,MAAMC,OAAO,GAAG,SAAhB;AACP,OAAO,MAAMC,OAAO,GAAG,SAAhB;AACP,OAAO,MAAMC,UAAU,GAAG,YAAnB;AACP,OAAO,MAAMC,YAAY,GAAG,cAArB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB,C,CAEP;;AACA,OAAO,MAAMC,WAAW,GAAG;AACzBC,EAAAA,IAAI,EAAEP;AADmB,CAApB;AAIP,OAAO,MAAMQ,YAAY,GAAG;AAC1BD,EAAAA,IAAI,EAAEN;AADoB,CAArB,C,CAIP;;AACA,OAAO,MAAMQ,YAAY,GAAGC,IAAI,IAAI;AAClC,SAAO;AACLH,IAAAA,IAAI,EAAEL,OADD;AAELQ,IAAAA,IAAI,EAAEA;AAFD,GAAP;AAID,CALM;;AAUP,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGf,YAAT,EAAuBgB,MAAvB,KAAkC;AAChD,UAAQA,MAAM,CAACN,IAAf;AACE,SAAKP,MAAL;AAAa;AACX,+CACKY,KADL;AAEEd,UAAAA,UAAU,EAAE,IAFd;AAGEC,UAAAA,IAAI,EAAEV;AAHR;AAKD;;AACD,SAAKY,OAAL;AAAc;AACZ,+CACKW,KADL;AAEEd,UAAAA,UAAU,EAAE,KAFd;AAGEC,UAAAA,IAAI,EAAE;AAHR;AAKD;;AACD,SAAKG,OAAL;AAAc;AACZ,+CACKU,KADL;AAEElB,UAAAA,UAAU,EAAEmB,MAAM,CAACH;AAFrB;AAID;;AACD;AAAS;AACP,iCACKE,KADL;AAGD;AAzBH;AA2BD,CA5BD;;AA8BA,eAAeE,IAAf","sourcesContent":["// 초기값(추후 dummy값을 이쪽으로 옮겨야 함)\r\nconst dummyUser = {\r\n  nickname: \"제로초\",\r\n  Post: [],\r\n  Followings: [],\r\n  Followers: [],\r\n  signUpData: {\r\n    id: \"\",\r\n    nickname: \"\",\r\n    password: \"\",\r\n  },\r\n};\r\n\r\nexport const initialState = {\r\n  isLoggedIn: false,\r\n  user: null,\r\n};\r\n\r\n//action명\r\nexport const LOG_IN = \"LOG_IN\";\r\nexport const LOG_OUT = \"LOG_OUT\";\r\nexport const SIGN_UP = \"SIGN_UP\";\r\nexport const SIGN_UP_ID = \"SIGN_UP_ID\";\r\nexport const SIGN_UP_NICK = \"SIGN_UP_NICK\";\r\nexport const SIGN_UP_PASSWORD = \"SIGN_UP_PASSWORD\";\r\n\r\n//action 정의\r\nexport const loginAction = {\r\n  type: LOG_IN,\r\n};\r\n\r\nexport const logoutAction = {\r\n  type: LOG_OUT,\r\n};\r\n\r\n// 동적데이터는 함수를 통해 넣어야 함\r\nexport const signUpAction = data => {\r\n  return {\r\n    type: SIGN_UP,\r\n    data: data,\r\n  };\r\n};\r\n\r\n\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case LOG_IN: {\r\n      return {\r\n        ...state,\r\n        isLoggedIn: true,\r\n        user: dummyUser,\r\n      };\r\n    }\r\n    case LOG_OUT: {\r\n      return {\r\n        ...state,\r\n        isLoggedIn: false,\r\n        user: null,\r\n      };\r\n    }\r\n    case SIGN_UP: {\r\n      return {\r\n        ...state,\r\n        signUpData: action.data,\r\n      };\r\n    }\r\n    default: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\nexport default redu"]},"metadata":{},"sourceType":"module"}