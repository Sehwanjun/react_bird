{"ast":null,"code":"import { all, takeLatest, takeEvery, call, put, take, delay } from \"redux-saga/effects\";\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from \"../reducers/user\";\nconst HELLO_SAGA = \"HELLO_SAGA\";\n\nfunction loginAPI() {// 서버에 요청을 보내는 부분\n}\n\nfunction* login() {\n  try {\n    yield call(loginAPI); // put은 dispatch와 동일\n\n    yield put({\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패시\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN, login);\n}\n\nfunction* hello() {\n  yield delay(1000);\n  yield put({\n    type: \"BYE_SAGA\"\n  });\n} // 1. login 요청을 해서 상단의 login함수(LOG_IN액션 실행)\n// 실행되게 함(비동기동작 위한 대기) 만약 그러면 LOG_IN_SUCCESS 실행\n// 반복문 넣는 이유: 예를들어 빼면 로그아웃후 다시 로그인시 작동불가 방지\n// function* watchLogin() {\n//   while (true) {\n//     yield take(LOG_IN);\n//     yield delay(2000);\n//     // put: saga의 dispatch\n//     put({\n//       type: LOG_IN_SUCCESS,\n//     });\n//   }\n// }\n//연속으로 값 막 누르면 마지막것만 적용해서 유효하게 하겠다면 takeLatest\n//매번 연결시키려면 (while(true))처럼 -> takeevery\n//로그인버튼 두번클릭시 실수니깐(takelatest로 쓰는게 나을듯)\n//반면 카운트같은 경우 모든클릭 유효하니 takeevery를 쓰는것\n\n\nfunction* watchHello() {\n  yield takeLatest(HELLO_SAGA, hello);\n} // call, fork는 함수를 실행시켜 줌\n// call은 동기호출, fork는 비동기호출\n// call은 응답을 받을때까지 기다림\n\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchHello)]);\n}","map":{"version":3,"sources":["C:/Users/arthu/Documents/react-nodebird/front/sagas/user.js"],"names":["all","takeLatest","takeEvery","call","put","take","delay","LOG_IN","LOG_IN_SUCCESS","LOG_IN_FAILURE","HELLO_SAGA","loginAPI","login","type","e","console","error","watchLogin","hello","watchHello","userSaga","fork"],"mappings":"AAAA,SACEA,GADF,EAEEC,UAFF,EAGEC,SAHF,EAIEC,IAJF,EAKEC,GALF,EAMEC,IANF,EAOEC,KAPF,QAQO,oBARP;AASA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,cAAjC,QAAuD,kBAAvD;AAEA,MAAMC,UAAU,GAAG,YAAnB;;AAEA,SAASC,QAAT,GAAoB,CAClB;AACD;;AAED,UAAUC,KAAV,GAAkB;AAChB,MAAI;AAEF,UAAMT,IAAI,CAACQ,QAAD,CAAV,CAFE,CAGF;;AACA,UAAMP,GAAG,CAAC;AACRS,MAAAA,IAAI,EAAEL;AADE,KAAD,CAAT;AAGD,GAPD,CAOE,OAAOM,CAAP,EAAU;AACV;AACAC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMV,GAAG,CAAC;AACRS,MAAAA,IAAI,EAAEJ;AADE,KAAD,CAAT;AAGD;AACF;;AAED,UAAUQ,UAAV,GAAuB;AACrB,QAAMf,SAAS,CAACK,MAAD,EAASK,KAAT,CAAf;AACD;;AAED,UAAUM,KAAV,GAAkB;AAChB,QAAMZ,KAAK,CAAC,IAAD,CAAX;AACA,QAAMF,GAAG,CAAC;AACRS,IAAAA,IAAI,EAAE;AADE,GAAD,CAAT;AAGD,C,CAED;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,UAAUM,UAAV,GAAuB;AACrB,QAAMlB,UAAU,CAACS,UAAD,EAAaQ,KAAb,CAAhB;AACD,C,CAED;AACA;AACA;;;AAEA,eAAe,UAAUE,QAAV,GAAqB;AAClC,QAAMpB,GAAG,CAAC,CAACqB,IAAI,CAACJ,UAAD,CAAL,EAAmBI,IAAI,CAACF,UAAD,CAAvB,CAAD,CAAT;AACD","sourcesContent":["import {\r\n  all,\r\n  takeLatest,\r\n  takeEvery,\r\n  call,\r\n  put,\r\n  take,\r\n  delay,\r\n} from \"redux-saga/effects\";\r\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from \"../reducers/user\";\r\n\r\nconst HELLO_SAGA = \"HELLO_SAGA\";\r\n\r\nfunction loginAPI() {\r\n  // 서버에 요청을 보내는 부분\r\n}\r\n\r\nfunction* login() {\r\n  try {\r\n    \r\n    yield call(loginAPI);\r\n    // put은 dispatch와 동일\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n    });\r\n  } catch (e) {\r\n    // loginAPI 실패시\r\n    console.error(e);\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogin() {\r\n  yield takeEvery(LOG_IN, login);\r\n}\r\n\r\nfunction* hello() {\r\n  yield delay(1000);\r\n  yield put({\r\n    type: \"BYE_SAGA\",\r\n  });\r\n}\r\n\r\n// 1. login 요청을 해서 상단의 login함수(LOG_IN액션 실행)\r\n// 실행되게 함(비동기동작 위한 대기) 만약 그러면 LOG_IN_SUCCESS 실행\r\n// 반복문 넣는 이유: 예를들어 빼면 로그아웃후 다시 로그인시 작동불가 방지\r\n\r\n// function* watchLogin() {\r\n//   while (true) {\r\n//     yield take(LOG_IN);\r\n//     yield delay(2000);\r\n//     // put: saga의 dispatch\r\n//     put({\r\n//       type: LOG_IN_SUCCESS,\r\n//     });\r\n//   }\r\n// }\r\n//연속으로 값 막 누르면 마지막것만 적용해서 유효하게 하겠다면 takeLatest\r\n//매번 연결시키려면 (while(true))처럼 -> takeevery\r\n//로그인버튼 두번클릭시 실수니깐(takelatest로 쓰는게 나을듯)\r\n//반면 카운트같은 경우 모든클릭 유효하니 takeevery를 쓰는것\r\nfunction* watchHello() {\r\n  yield takeLatest(HELLO_SAGA, hello);\r\n}\r\n\r\n// call, fork는 함수를 실행시켜 줌\r\n// call은 동기호출, fork는 비동기호출\r\n// call은 응답을 받을때까지 기다림\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLogin), fork(watchHello)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}